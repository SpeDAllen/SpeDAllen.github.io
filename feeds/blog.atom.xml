<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>"My new blog" - blog</title><link href="http://SpeDAllen.github.io/" rel="alternate"></link><link href="http://SpeDAllen.github.io/feeds/blog.atom.xml" rel="self"></link><id>http://SpeDAllen.github.io/</id><updated>2024-04-27T17:41:23+02:00</updated><subtitle>Explore, learn, code, contribue, improve</subtitle><entry><title>Pelican blogging with Org mode</title><link href="http://SpeDAllen.github.io/2024/blog/blogging.html" rel="alternate"></link><published>2024-04-27T00:00:00+02:00</published><updated>2024-04-27T17:41:23+02:00</updated><author><name>public</name></author><id>tag:spedallen.github.io,2024-04-27:/2024/blog/blogging.html</id><summary type="html">
&lt;div id="outline-container-org676358c" class="outline-2"&gt;
&lt;h2 id="org676358c"&gt;Setting up this blog&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org676358c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdff1622" class="outline-3"&gt;
&lt;h3 id="orgdff1622"&gt;GitHub pages&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdff1622"&gt;
&lt;p&gt;
GitHub will host your static web pages for you even on a free account making it rather ideal for a blog hosting platform.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9bf4537" class="outline-3"&gt;
&lt;h3 id="org9bf4537"&gt;Pelican&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9bf4537"&gt;
&lt;p&gt;
But before setting anything up in GitHub you should decide on your tooling. There are several site generators freely available â€¦&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;div id="outline-container-org676358c" class="outline-2"&gt;
&lt;h2 id="org676358c"&gt;Setting up this blog&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org676358c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdff1622" class="outline-3"&gt;
&lt;h3 id="orgdff1622"&gt;GitHub pages&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdff1622"&gt;
&lt;p&gt;
GitHub will host your static web pages for you even on a free account making it rather ideal for a blog hosting platform.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9bf4537" class="outline-3"&gt;
&lt;h3 id="org9bf4537"&gt;Pelican&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9bf4537"&gt;
&lt;p&gt;
But before setting anything up in GitHub you should decide on your tooling. There are several site generators freely available with &lt;a href="https://jekyllrb.com/"&gt;Jenkyll&lt;/a&gt; probably being the most popular. I initially was going to use &lt;a href="https://jekyllrb.com/"&gt;Jenkyll&lt;/a&gt; but after noticing it's license I decided to look for alternatives. &lt;a href="https://www.sitepoint.com/6-static-blog-generators-arent-jekyll/"&gt;Using this article&lt;/a&gt; I found Pelican which is licensed with AGPL which I feel offers more protection from open source exploitation. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org61b939c" class="outline-3"&gt;
&lt;h3 id="org61b939c"&gt;Git started&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org61b939c"&gt;
&lt;p&gt;
With my tooling and hosting platform decided upon I followed this &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;Fedoria magazine article&lt;/a&gt; to setup the basic Git structure. I use NixOs so not every applies to me but it was very helpful. They casually mention initializing your source repository with a readme but I found out the hard way that it's better to initialize it with a python .gitignore file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb50018d" class="outline-3"&gt;
&lt;h3 id="orgb50018d"&gt;Dev environment&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb50018d"&gt;
&lt;p&gt;
With a place to store and track my progress setup it was time to install the tools. I started with setting up a flake that I could use to version control the software used. It's not complicated if your accustomed to flakes.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-nix"&gt;
{
  description = "blog";
  inputs =
    {
      nixpkgs.url = "github:nixos/nixpkgs/23.11";
     };
  outputs = { self, nixpkgs }:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
    in
    {
      devShells.x86_64-linux.default = ( import ./shell.nix { inherit pkgs; });
    };
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Basically you specify your sources and where you want to use them and Nix takes care of the rest. The Nix shell was surprisingly simple after a lot of trial and error due to my inexperience using them this way.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-nix"&gt;
{ pkgs ? import &amp;lt;nixpkgs&amp;gt; { } }:
pkgs.mkShell
  {
    packages = [
      (pkgs.python3.withPackages (python-pkgs: [
	python-pkgs.pelican
	python-pkgs.ghp-import
      ]))
      pkgs.emacs
      pkgs.emacsPackages.htmlize
      pkgs.emacsPackages.nix-mode
    ];
  }
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
The emacs packages used here aren't necessary if you don't plan to use the org_reader Pelican plugin. If you want to write your blog using markdown or something else it can be safely omitted. Now to work on a blog post I only need to navigate to the source git repo in the command line and run.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-shell"&gt;
nix develop
make devserver
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
That will process the source files and serve the sight at &lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; while monitoring your sources for changes so you can view your blog as you work on it. Since it's a nix shell I need only exit for the tooling to be removed. And because it's in a flake it will be rebuilt identically the next time.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5f960ab" class="outline-3"&gt;
&lt;h3 id="org5f960ab"&gt;Org mode blogging with Pelican&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5f960ab"&gt;
&lt;p&gt;
Out of the box Pelican doesn't support org documents as source but there are three plugins you can use.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgcdd7ba9" class="outline-4"&gt;
&lt;h4 id="orgcdd7ba9"&gt;org_pandoc_reader&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgcdd7ba9"&gt;
&lt;p&gt;
It appears to be very simple to use but it sadly hasn't been maintained. Requiring a very old version of python that's no longer available in the Nix packages.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeadd73e" class="outline-4"&gt;
&lt;h4 id="orgeadd73e"&gt;org_python_reader&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgeadd73e"&gt;
&lt;p&gt;
Is newer but sadly one of it's dependencies pyton-orgco isn't packaged by nix yet.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org62b8ab7" class="outline-4"&gt;
&lt;h4 id="org62b8ab7"&gt;org_reader&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org62b8ab7"&gt;
&lt;p&gt;
Is the most logical of the org plugins available requiring only emacs which you're probably using to author your org documents anyway. It needs to know the path to emacs which is complicated by running nix shell on NixOS.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2c0c4dc" class="outline-3"&gt;
&lt;h3 id="org2c0c4dc"&gt;Installing and configuring org_reader&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2c0c4dc"&gt;
&lt;p&gt;
I chose to add the pelican plugins repo as a git submodule to keep everything contained and make my paths simple. It's may not be the best solution but since I already have a submodule for the output why not add more? Per the plugins documentation I only needed to tell Pelican where to find the plugins and define what to use.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;
&lt;span style="font-weight: bold; font-style: italic;"&gt;PLUGIN_PATHS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'./pelican-plugins'&lt;/span&gt;]
&lt;span style="font-weight: bold; font-style: italic;"&gt;PLUGINS&lt;/span&gt; = [&lt;span style="font-style: italic;"&gt;'org_reader'&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Telling org_reader where to find emacs in a nix shell dev environment was a bit more tricky. I settled on making the shell that installs emacs do it for me. Someday I may improve this bash with some simple if statements but it's enough to keep me moving forward. The property doesn't need to be added every time nix develop is called so once it did it's thing I commented it out leaving my shell.nix file looking like
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-nix"&gt;
  { pkgs ? import &amp;lt;nixpkgs&amp;gt; { } }:
pkgs.mkShell
  {
    packages = [
      (pkgs.python3.withPackages (python-pkgs: [
	python-pkgs.pelican
	python-pkgs.ghp-import
      ]))
      pkgs.emacs
      pkgs.emacsPackages.htmlize
      pkgs.emacsPackages.nix-mode
    ];
    # shellHook = ''
    #   echo ORG_READER_EMACS_LOCATION = \'${pkgs.emacs}/bin/emacs\' &amp;gt;&amp;gt; ./pelicanconf.py
    # '';
  }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc4026e1" class="outline-3"&gt;
&lt;h3 id="orgc4026e1"&gt;Final thoughts&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc4026e1"&gt;
&lt;p&gt;
There's work still to be done with the syntax highlighting some formatting I'd like to improve but that can be tomorrows problem.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="flakes"></category><category term="blog"></category><category term="pelican"></category><category term="devShell"></category><category term="orgMode"></category><category term="gitHub"></category></entry></feed>